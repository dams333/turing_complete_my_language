<IDENTIFIER> ::= ([a-z] | [A-Z] | "_") ([a-z] | [A-Z] | [0-9] | "_")*
<NUMBER> ::= [0-9] [0-9]*

<BINARY_OPERATOR> ::= "+" | "-" | "&" | "&&" | "|" | "||" | "==" | "!=" | "<" | ">" | "<=" | ">="
<UNARY_OPERATOR> ::= "!"

<PROGRAM> ::= <FUNCTION> <FUNCTION>

<FUNCTION> ::= "func" <IDENTIFIER> "(" <FUNCTION_PARAMETERS>? ")" <SCOPE>

<FUNCTION_PARAMETER> ::= <IDENTIFIER>
<FUNCTION_PARAMETERS> ::= <FUNCTION_PARAMETER> ("," <FUNCTION_PARAMETER>)*

<SCOPE> ::= "{" <STATEMENTS>* "}"

<STATEMENTS> ::= <STATEMENT> <STATEMENT>*
<STATEMENT> ::= <VAR_DECLARATION> | <VAR_ASSIGNMENT> | <RETURN> | <IF> | <WHILE> | <FUNCTION_CALL>

<EXPRESSIONS> ::= <EXPRESSION> ("," <EXPRESSION>)*
<EXPRESSION> ::= <IDENTIFIER> | <NUMBER> | <FUNCTION_CALL> | <BINARY_EXPRESSION> | <UNARY_EXPRESSION>

<BINARY_EXPRESSION> ::= <EXPRESSION> <BINARY_OPERATOR> <EXPRESSION>
<UNARY_EXPRESSION> ::= <UNARY_OPERATOR> <EXPRESSION>

<VAR_DECLARATION> ::= "var" <IDENTIFIER> ("=" <EXPRESSION>)?

<VAR_ASSIGNMENT> ::= <IDENTIFIER> "=" <EXPRESSION>

<RETURN> ::= "return" <EXPRESSION>

<IF> ::= "if" "(" <EXPRESSION> ")" <SCOPE> ("else" <SCOPE>)?

<WHILE> ::= "while" "(" <EXPRESSION> ")" <SCOPE>

<FUNCTION_CALL> ::= <IDENTIFIER> "(" <EXPRESSIONS>? ")"